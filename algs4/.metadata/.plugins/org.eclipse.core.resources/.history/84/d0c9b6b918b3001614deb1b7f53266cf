import java.util.IdentityHashMap;

import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;


public class QuickUnionUF {

	/**
	 *  UF(int n) initialize N sites with integer names(0 to n-1)
	 *  void union(int p,int q) add connection between p and q 
	 *  int find(int p ) componentidertifier for p(0 to n-1)
	 *  boolean connected(int p,int q) return true if p and q are same componnet int count() number of component
	 * int count()
	 * @param args
	 */
	private int count;//declaration 
	private int[] id;
	public QuickUnionUF(int n) {
		// TODO Auto-generated constructor stub
	}
	public void QuickUnionUF(int n) {
          count = n;   //intilazie
          id =new int[n];
          for (int i = 0; i < id.length; i++) {
			id[i]=i;
		}
		
	}
	public int find(int p ){
		int pid;
		pid=id[p];
		while(pid!=id[p]) pid=id[pid];
		return pid;
	}
	public boolean connected(int p ,int q ){
		return find(p)==find(q);
	}
	public void union(int p,int q){
		int proot=find(p);
		int qroot=find(q);
		if(qroot==proot)
			return;
		id[proot]=qroot;
		count--;
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
      int n=StdIn.readInt();
      QuickUnionUF uf=new QuickUnionUF(n);
      while(!StdIn.isEmpty()){
    	  int p=StdIn.readInt();
    	  int q=StdIn.readInt();
    	  if(uf.connected(p, q))continue;
    	  uf.connected(p, q);
      }
      StdOut.println("compoments is "+uf.count);
	}

}
