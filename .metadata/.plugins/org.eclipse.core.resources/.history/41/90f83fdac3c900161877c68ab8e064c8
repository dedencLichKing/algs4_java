import java.awt.RenderingHints.Key;

import edu.princeton.cs.algs4.StdOut;

public class OrderedArrayMaxPQ <Key extends Comparable<Key>>{
		private Key[] pq;
		private int n;
		public OrderedArrayMaxPQ(int max){//create a priority queue of initial capacity
			pq= (Key[]) new Comparable[max+1];		
		}
		public void insert(Key v){
			if(less(v, pq[n-1])){//if and if v less pq[n](max)
				for(int i=n;i>0;i--)
				a[i]=a[i-1];
					
			}
			pq[++n]=v;
			
			
			
		}
		 public void insert(Key key) {
		        int i = n-1;
		        while (i >= 0 && less(key, pq[i])) {
		            pq[i+1] = pq[i];
		            i--;
		        }
		        pq[i+1] = key;
		        n++;
		    }
		public Key max(){
			return pq[1];
		}
		public Key delMax(){ //return and remove the lagrest one
			//exch(a[1],a[n]);
			//sink(a[1]);
			// a[n--]=null;
			return pq[1];
		}
		public boolean isEmpty(){
			return n==0;
		}
		public int size(){
			return n;
		}
		private boolean less(Key v,Key w){
			return v.compareTo(w)<0;
		}
		public static void main(String[] args){
			OrderedArrayMaxPQ<String> pq =new OrderedArrayMaxPQ<String>(10);
			pq.insert("this");
			pq.insert("is");
			pq.insert("a");
			pq.insert("test");
			//while(!pq.isEmpty())
				StdOut.println(pq.delMax());
		}
	}
